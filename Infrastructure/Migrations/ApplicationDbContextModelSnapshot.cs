// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Models.TbChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ChatMessage_Id");

                    b.HasIndex(new[] { "DocumentId" }, "IX_ChatMessageDocumentId");

                    b.HasIndex(new[] { "DateCreated" }, "IX_ChatMessage_DateCreated");

                    b.HasIndex(new[] { "SessionId" }, "IX_ChatMessage_SessionId");

                    b.HasIndex(new[] { "UserId" }, "IX_ChatMessage_UserId");

                    b.HasIndex(new[] { "SessionId", "UserId", "DateCreated" }, "UK_ChatMessage_SessionIdAndUserIdAndDateCreated")
                        .IsUnique();

                    b.ToTable("tb_ChatMessage", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbChatSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Topic")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id")
                        .HasName("PK_ChatSession_Id");

                    b.HasIndex(new[] { "DateCreated" }, "IX_ChatSession_DateCreated");

                    b.HasIndex(new[] { "Topic" }, "IX_ChatSession_Topic");

                    b.HasIndex(new[] { "Topic", "DateCreated" }, "UK_ChatSession_TopicAndDateCreated")
                        .IsUnique()
                        .HasFilter("[Topic] IS NOT NULL");

                    b.ToTable("tb_ChatSession", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbChatSessionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("User1Id")
                        .HasColumnType("int");

                    b.Property<int>("User2Id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ChatSessionUser_Id");

                    b.HasIndex(new[] { "DateCreated" }, "IX_ChatSessionUser_DateCreated");

                    b.HasIndex(new[] { "SessionId" }, "IX_ChatSessionUser_SessionId");

                    b.HasIndex(new[] { "User1Id" }, "IX_ChatSessionUser_User1Id");

                    b.HasIndex(new[] { "User2Id" }, "IX_ChatSessionUser_User2Id");

                    b.HasIndex(new[] { "SessionId", "User1Id", "User2Id" }, "UK_ChatSessionUser_SessionIdAndUser1IdAndUser2Id")
                        .IsUnique();

                    b.ToTable("tb_ChatSessionUser", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbClinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActivationStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageKey")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Clinic_Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex(new[] { "SpecialityId" }, "IX_Clinic_SpecialityId")
                        .IsUnique();

                    b.HasIndex(new[] { "BrandName" }, "UK_Clinic_BrandName")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UK_Clinic_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "UK_Clinic_Phone")
                        .IsUnique();

                    b.ToTable("tb_Clinic", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbClinicService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Fees")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ClinicService_Id");

                    b.HasIndex(new[] { "ClinicId" }, "IX_ClinicService_ClinicId");

                    b.HasIndex(new[] { "ServiceId" }, "IX_ClinicService_ServiceId");

                    b.HasIndex(new[] { "ClinicId", "ServiceId" }, "UK_ClinicService_ClinicIdAndServiceId")
                        .IsUnique();

                    b.ToTable("tb_ClinicService", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbClinicStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ClinicStaff_Id");

                    b.HasIndex(new[] { "ClinicId" }, "IX_ClinicStaff_ClinicId");

                    b.HasIndex(new[] { "UserId" }, "IX_ClinicStaff_UserId");

                    b.HasIndex(new[] { "ClinicId", "UserId" }, "UK_ClinicStaff_ClinicIdAndUserId")
                        .IsUnique();

                    b.ToTable("tb_ClinicStaff", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbClinicWaiting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ClinicWaiting_Id");

                    b.HasIndex(new[] { "ClinicId" }, "IX_ClinicWaiting_ClinicId");

                    b.HasIndex(new[] { "ClinicId", "PatientId" }, "IX_ClinicWaiting_ClinicIdAndUserId")
                        .IsUnique();

                    b.HasIndex(new[] { "DateCreated" }, "IX_ClinicWaiting_DateCreated");

                    b.HasIndex(new[] { "PatientId" }, "IX_ClinicWaiting_UserId");

                    b.ToTable("tb_ClinicWaiting", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Annotation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("DocumentKey")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Document_Id");

                    b.HasIndex(new[] { "DocumentKey" }, "IX_Document_DocumentKey");

                    b.HasIndex(new[] { "PatientId" }, "IX_Document_UserId");

                    b.ToTable("tb_Document", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbMasterAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_MasterAdmin_Id");

                    b.HasIndex(new[] { "Password" }, "IX_MasterAdmin_Password");

                    b.HasIndex(new[] { "Email" }, "UK_MasterAdmin_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "FullName" }, "UK_MasterAdmin_FullName")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "UK_MasterAdmin_Phone")
                        .IsUnique();

                    b.ToTable("tb_MasterAdmin", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbMasterAdminRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("MasterAdminId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_MasterAdminRole_Id");

                    b.HasIndex(new[] { "MasterAdminId" }, "IX_MasterAdminRole_MasterAdminId");

                    b.HasIndex(new[] { "RoleId" }, "IX_MasterAdminRole_RoleId");

                    b.HasIndex(new[] { "MasterAdminId", "RoleId" }, "UK_MasterAdminRole_MasterAdminIdAndRoleId")
                        .IsUnique();

                    b.ToTable("tb_MasterAdminRole", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbMedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("DayPayment")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Diagnoses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextVisitDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<decimal>("PreviousPayment")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Recommendations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainingPayment")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalFees")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TreatmentPlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecordTypeId");

                    b.HasIndex(new[] { "ClinicId" }, "IX_MedicalRecord_ClinicId");

                    b.HasIndex(new[] { "PatientId" }, "IX_MedicalRecord_UserId");

                    b.HasIndex(new[] { "DateCreated" }, "IX_MedicalRecord_VisitDate");

                    b.HasIndex(new[] { "Id" }, "IX_tb_MedicalRecord");

                    b.ToTable("tb_MedicalRecord", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbMedicalRecordDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("tb_MedicalRecordDoctors", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbMedicalRecordDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("DocumentIdId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_MedicalRecordDocument_Id");

                    b.HasIndex("DocumentIdId");

                    b.HasIndex(new[] { "MedicalRecordId", "DocumentIdId" }, "UK_MedicalRecordDocument_RecordIdAndDocumentId")
                        .IsUnique();

                    b.ToTable("tb_MedicalRecordDocument", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("ActivationStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Bio")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tb_Organization", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ClinicReservation_Id");

                    b.HasIndex(new[] { "ClinicId" }, "IX_Reservation_ClinicId");

                    b.HasIndex(new[] { "ReservationDate" }, "IX_Reservation_ReservationDate");

                    b.HasIndex(new[] { "UserId" }, "IX_Reservation_UserId");

                    b.HasIndex(new[] { "ClinicId", "UserId", "ReservationDate" }, "UK_Reservation_ClinicIdAndUserIdAndResDate")
                        .IsUnique();

                    b.ToTable("tb_Reservation", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbReservationGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<TimeOnly?>("FriEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("FriStart")
                        .HasColumnType("time");

                    b.Property<int?>("FriTimeShift")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("MonEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("MonStart")
                        .HasColumnType("time");

                    b.Property<int?>("MonTimeShift")
                        .HasColumnType("int");

                    b.Property<int>("ReservationDuration")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("SatEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("SatStart")
                        .HasColumnType("time");

                    b.Property<int?>("SatTimeShift")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("SunEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("SunStart")
                        .HasColumnType("time");

                    b.Property<int?>("SunTimeShift")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("ThuEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("ThuStart")
                        .HasColumnType("time");

                    b.Property<int?>("ThuTimeShift")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("TueEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("TueStart")
                        .HasColumnType("time");

                    b.Property<int?>("TueTimeShift")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("WedEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("WedStart")
                        .HasColumnType("time");

                    b.Property<int?>("WedTimeShift")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ReservationGuide_Id");

                    b.HasIndex(new[] { "ClinicId" }, "IX_ReservationGuide_ClinicId");

                    b.HasIndex(new[] { "Id" }, "UK_ReservationGuide_ClinicId");

                    b.ToTable("tb_ReservationGuide", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Review_Id");

                    b.HasIndex(new[] { "ClinicId" }, "IX_Review_ClinicId");

                    b.HasIndex(new[] { "DateCreated" }, "IX_Review_DateCreated");

                    b.HasIndex(new[] { "UserId" }, "IX_Review_UserId");

                    b.HasIndex(new[] { "ClinicId", "UserId" }, "UK_Review_ClinicIdAndUserId")
                        .IsUnique();

                    b.ToTable("tb_Review", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Role_Id");

                    b.HasIndex(new[] { "RoleName" }, "IX_Role_RoleName");

                    b.ToTable("tb_Role", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbStaffRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicStaffId")
                        .HasColumnType("int");

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_StaffRole_Id");

                    b.HasIndex(new[] { "ClinicStaffId" }, "IX_StaffRole_ClinicStaffId");

                    b.HasIndex(new[] { "RoleId" }, "IX_StaffRole_RoleId");

                    b.HasIndex(new[] { "ClinicStaffId", "RoleId" }, "UK_StaffRole_ClinicStaffIdAndRoleId")
                        .IsUnique();

                    b.ToTable("tb_StaffRole", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbStaticDataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_StaticDataType_Id");

                    b.HasIndex(new[] { "Name" }, "UK_StaticDataType_Name")
                        .IsUnique();

                    b.ToTable("tb_StaticDataType", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbStaticDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StaticDataTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_StaticData_Id");

                    b.HasIndex(new[] { "StaticDataTypeId" }, "IX_StaticData_StaticDataTypeId");

                    b.HasIndex(new[] { "StaticDataTypeId", "Name" }, "UK_StaticData_TypeIdAndName")
                        .IsUnique()
                        .HasFilter("[StaticDataTypeId] IS NOT NULL");

                    b.ToTable("tb_StaticData", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActivationStatus")
                        .HasColumnType("bit");

                    b.Property<byte[]>("DateCreated")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EnableCrossEdit")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageKey")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Doctor_Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex(new[] { "SpecialityId" }, "IX_User_SpecialityId");

                    b.HasIndex(new[] { "UserTypeId" }, "IX_User_UserTypeId");

                    b.HasIndex(new[] { "Id" }, "UK_User_Email");

                    b.HasIndex(new[] { "FullName" }, "UK_User_FullName")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "UK_User_Phone");

                    b.ToTable("tb_User", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Models.TbChatMessage", b =>
                {
                    b.HasOne("Infrastructure.Models.TbDocument", "Document")
                        .WithMany("TbChatMessages")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_Document_ChatMessage");

                    b.HasOne("Infrastructure.Models.TbChatSession", "Session")
                        .WithMany("TbChatMessages")
                        .HasForeignKey("SessionId")
                        .IsRequired()
                        .HasConstraintName("FK_ChatSession_ChatMessage");

                    b.HasOne("Infrastructure.Models.TbChatSessionUser", "User")
                        .WithMany("TbChatMessages")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ChatSessionUser_ChatMessage");

                    b.Navigation("Document");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.TbChatSessionUser", b =>
                {
                    b.HasOne("Infrastructure.Models.TbChatSession", "Session")
                        .WithMany("TbChatSessionUsers")
                        .HasForeignKey("SessionId")
                        .IsRequired()
                        .HasConstraintName("FK_ChatSession_ChatSessionUser");

                    b.HasOne("Infrastructure.Models.TbUser", "User1")
                        .WithMany("TbChatSessionUserUser1s")
                        .HasForeignKey("User1Id")
                        .IsRequired()
                        .HasConstraintName("FK_User_ChatSessionUser1");

                    b.HasOne("Infrastructure.Models.TbUser", "User2")
                        .WithMany("TbChatSessionUserUser2s")
                        .HasForeignKey("User2Id")
                        .IsRequired()
                        .HasConstraintName("FK_User_ChatSessionUser2");

                    b.Navigation("Session");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Infrastructure.Models.TbClinic", b =>
                {
                    b.HasOne("Infrastructure.Models.TbOrganization", "Organization")
                        .WithMany("TbClinics")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Organization_Clinic__OrganizationId");

                    b.HasOne("Infrastructure.Models.TbStaticDatum", "Speciality")
                        .WithOne("TbClinic")
                        .HasForeignKey("Infrastructure.Models.TbClinic", "SpecialityId")
                        .IsRequired()
                        .HasConstraintName("FK_StaticData_Clinic");

                    b.Navigation("Organization");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Infrastructure.Models.TbClinicService", b =>
                {
                    b.HasOne("Infrastructure.Models.TbClinic", "Clinic")
                        .WithMany("TbClinicServices")
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK_Clinic_ClinicService");

                    b.HasOne("Infrastructure.Models.TbStaticDatum", "Service")
                        .WithMany("TbClinicServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_StaticData_ClinicService");

                    b.Navigation("Clinic");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Infrastructure.Models.TbClinicStaff", b =>
                {
                    b.HasOne("Infrastructure.Models.TbClinic", "Clinic")
                        .WithMany("TbClinicStaffs")
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK_Clinic_ClinicStaff");

                    b.HasOne("Infrastructure.Models.TbUser", "User")
                        .WithMany("TbClinicStaffs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_User_ClinicStaff");

                    b.Navigation("Clinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.TbClinicWaiting", b =>
                {
                    b.HasOne("Infrastructure.Models.TbClinic", "Clinic")
                        .WithMany("TbClinicWaitings")
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK_Clinic_ClinicWaiting");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Infrastructure.Models.TbDocument", b =>
                {
                    b.HasOne("Infrastructure.Models.TbUser", "Patient")
                        .WithMany("TbDocuments")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Document");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Infrastructure.Models.TbMasterAdminRole", b =>
                {
                    b.HasOne("Infrastructure.Models.TbMasterAdmin", "MasterAdmin")
                        .WithMany("TbMasterAdminRoles")
                        .HasForeignKey("MasterAdminId")
                        .IsRequired()
                        .HasConstraintName("FK_MasterAdmin_MasterAdminRole");

                    b.HasOne("Infrastructure.Models.TbRole", "Role")
                        .WithMany("TbMasterAdminRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Role_MasterAdminRole");

                    b.Navigation("MasterAdmin");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Infrastructure.Models.TbMedicalRecord", b =>
                {
                    b.HasOne("Infrastructure.Models.TbClinic", "Clinic")
                        .WithMany("TbMedicalRecords")
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK_Clinic_MedicalRecord");

                    b.HasOne("Infrastructure.Models.TbUser", "Patient")
                        .WithMany("TbMedicalRecords")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_User_MedicalRecord");

                    b.HasOne("Infrastructure.Models.TbStaticDatum", "RecordType")
                        .WithMany("TbMedicalRecords")
                        .HasForeignKey("RecordTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_StaticData_MedicalRecord");

                    b.Navigation("Clinic");

                    b.Navigation("Patient");

                    b.Navigation("RecordType");
                });

            modelBuilder.Entity("Infrastructure.Models.TbMedicalRecordDoctor", b =>
                {
                    b.HasOne("Infrastructure.Models.TbUser", "Doctor")
                        .WithMany("TbMedicalRecordDoctors")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_User_MedicalRecordDoctors");

                    b.HasOne("Infrastructure.Models.TbMedicalRecord", "MedicalRecord")
                        .WithMany("TbMedicalRecordDoctors")
                        .HasForeignKey("MedicalRecordId")
                        .IsRequired()
                        .HasConstraintName("FK_MedicalRecord_MedicalRecordDoctors");

                    b.Navigation("Doctor");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("Infrastructure.Models.TbMedicalRecordDocument", b =>
                {
                    b.HasOne("Infrastructure.Models.TbDocument", "DocumentId")
                        .WithMany("TbMedicalRecordDocuments")
                        .HasForeignKey("DocumentIdId")
                        .IsRequired()
                        .HasConstraintName("FK_Document_MedicalRecordDocument");

                    b.HasOne("Infrastructure.Models.TbMedicalRecord", "MedicalRecord")
                        .WithMany("TbMedicalRecordDocuments")
                        .HasForeignKey("MedicalRecordId")
                        .IsRequired()
                        .HasConstraintName("FK_MedicalRecord_MedicalRecordDocument");

                    b.Navigation("DocumentId");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("Infrastructure.Models.TbReservation", b =>
                {
                    b.HasOne("Infrastructure.Models.TbClinic", "Clinic")
                        .WithMany("TbReservations")
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK_Clinic_Reservation");

                    b.HasOne("Infrastructure.Models.TbUser", "User")
                        .WithMany("TbReservations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Reservation");

                    b.Navigation("Clinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.TbReservationGuide", b =>
                {
                    b.HasOne("Infrastructure.Models.TbClinic", "Clinic")
                        .WithMany("TbReservationGuides")
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK_Clinic_ReservationGuide");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Infrastructure.Models.TbReview", b =>
                {
                    b.HasOne("Infrastructure.Models.TbClinic", "Clinic")
                        .WithMany("TbReviews")
                        .HasForeignKey("ClinicId")
                        .IsRequired()
                        .HasConstraintName("FK_Clinic_Review");

                    b.HasOne("Infrastructure.Models.TbUser", "User")
                        .WithMany("TbReviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Review");

                    b.Navigation("Clinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.TbStaffRole", b =>
                {
                    b.HasOne("Infrastructure.Models.TbClinicStaff", "ClinicStaff")
                        .WithMany("TbStaffRoles")
                        .HasForeignKey("ClinicStaffId")
                        .IsRequired()
                        .HasConstraintName("FK_ClinicStaff_StaffRole");

                    b.HasOne("Infrastructure.Models.TbRole", "Role")
                        .WithMany("TbStaffRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Role_StaffRole");

                    b.Navigation("ClinicStaff");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Infrastructure.Models.TbStaticDatum", b =>
                {
                    b.HasOne("Infrastructure.Models.TbStaticDataType", "StaticDataType")
                        .WithMany("TbStaticData")
                        .HasForeignKey("StaticDataTypeId")
                        .HasConstraintName("FK_StaticDataType_StaticData");

                    b.Navigation("StaticDataType");
                });

            modelBuilder.Entity("Infrastructure.Models.TbUser", b =>
                {
                    b.HasOne("Infrastructure.Models.TbOrganization", "Organization")
                        .WithMany("TbUsers")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Organization_User_OrganizationId");

                    b.HasOne("Infrastructure.Models.TbStaticDatum", "Speciality")
                        .WithMany("TbUserSpecialities")
                        .HasForeignKey("SpecialityId")
                        .HasConstraintName("FK_StaticData_User_Speciality");

                    b.HasOne("Infrastructure.Models.TbStaticDatum", "UserType")
                        .WithMany("TbUserUserTypes")
                        .HasForeignKey("UserTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_StaticData_User_UserType");

                    b.Navigation("Organization");

                    b.Navigation("Speciality");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Infrastructure.Models.TbChatSession", b =>
                {
                    b.Navigation("TbChatMessages");

                    b.Navigation("TbChatSessionUsers");
                });

            modelBuilder.Entity("Infrastructure.Models.TbChatSessionUser", b =>
                {
                    b.Navigation("TbChatMessages");
                });

            modelBuilder.Entity("Infrastructure.Models.TbClinic", b =>
                {
                    b.Navigation("TbClinicServices");

                    b.Navigation("TbClinicStaffs");

                    b.Navigation("TbClinicWaitings");

                    b.Navigation("TbMedicalRecords");

                    b.Navigation("TbReservationGuides");

                    b.Navigation("TbReservations");

                    b.Navigation("TbReviews");
                });

            modelBuilder.Entity("Infrastructure.Models.TbClinicStaff", b =>
                {
                    b.Navigation("TbStaffRoles");
                });

            modelBuilder.Entity("Infrastructure.Models.TbDocument", b =>
                {
                    b.Navigation("TbChatMessages");

                    b.Navigation("TbMedicalRecordDocuments");
                });

            modelBuilder.Entity("Infrastructure.Models.TbMasterAdmin", b =>
                {
                    b.Navigation("TbMasterAdminRoles");
                });

            modelBuilder.Entity("Infrastructure.Models.TbMedicalRecord", b =>
                {
                    b.Navigation("TbMedicalRecordDoctors");

                    b.Navigation("TbMedicalRecordDocuments");
                });

            modelBuilder.Entity("Infrastructure.Models.TbOrganization", b =>
                {
                    b.Navigation("TbClinics");

                    b.Navigation("TbUsers");
                });

            modelBuilder.Entity("Infrastructure.Models.TbRole", b =>
                {
                    b.Navigation("TbMasterAdminRoles");

                    b.Navigation("TbStaffRoles");
                });

            modelBuilder.Entity("Infrastructure.Models.TbStaticDataType", b =>
                {
                    b.Navigation("TbStaticData");
                });

            modelBuilder.Entity("Infrastructure.Models.TbStaticDatum", b =>
                {
                    b.Navigation("TbClinic");

                    b.Navigation("TbClinicServices");

                    b.Navigation("TbMedicalRecords");

                    b.Navigation("TbUserSpecialities");

                    b.Navigation("TbUserUserTypes");
                });

            modelBuilder.Entity("Infrastructure.Models.TbUser", b =>
                {
                    b.Navigation("TbChatSessionUserUser1s");

                    b.Navigation("TbChatSessionUserUser2s");

                    b.Navigation("TbClinicStaffs");

                    b.Navigation("TbDocuments");

                    b.Navigation("TbMedicalRecordDoctors");

                    b.Navigation("TbMedicalRecords");

                    b.Navigation("TbReservations");

                    b.Navigation("TbReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
